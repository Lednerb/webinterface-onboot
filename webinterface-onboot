#!/usr/bin/env bash
# Copyright (c) 2023 rM-self-serve
# SPDX-License-Identifier: MIT

webinterface_onboot_version='v1.1.0'

main() {
	# collect options before or after command
	no_prompt=false
	if nop_match "$1"; then
		no_prompt=true
		shift
	fi
	cmd=("$1")
	if [[ "$2" != "" ]]; then
		shift
		if [ "$no_prompt" == false ] && nop_match "$1"; then
			no_prompt=true
			shift
		fi
		cmd+=("$@")
	fi

	case ${cmd[@]} in
	'-h' | '--help' | '')
		cli_info
		;;
	'-s' | '--status')
		status
		;;
	'local-exec')
		run
		;;
	'apply')
		apply_hack
		;;
	'revert')
		revert_hack
		;;
	*)
		echo 'input not recognized'
		cli_info
		;;
	esac
}

nop_match() {
	[[ "$1" == *"-y"* ]] || [[ "$1" == *"--no-prompt"* ]]
}

cli_info() {
	echo -e "${GREEN}webinterface-onboot ${webinterface_onboot_version}${NC}"
	echo ''
	echo 'This simple program will convince the ReMarkable Tablet to start'
	echo 'the web interface after booting without the usb cord being plugged in.'
	echo 'Xochitl versions >= v2.15 require simple binary hack.'
	echo 'Source+Docs: https://github.com/rM-self-serve/webinterface-onboot'
	echo ''
	echo -e "${CYAN}ENABLE/USE:${NC}"
	echo '$ systemctl enable --now webinterface-onboot'
	echo ''
	echo -e "${CYAN}DISABLE:${NC}"
	echo '$ systemctl disable --now webinterface-onboot'
	echo ''
	echo -e "${CYAN}USAGE:${NC}"
	echo '  webinterface-onboot [COMMANDS] [OPTIONS]'
	echo ''
	echo -e "${CYAN}COMMANDS:${NC}"
	echo '  apply             Apply webinterface-onboot hack for versions >= v2.15'
	echo '  revert            Revert webinterface-onboot hack'
	echo '  local-exec        Run webinterface-onboot in current shell'
	echo ''
	echo -e "${CYAN}OPTIONS:${NC}"
	echo '  -h, --help        Show help'
	echo '  -s, --status      Status of webinterface-onboot'
	echo '  -y, --no-prompt   Do not prompt for confirmation'
}

run_vars() {
	user_conf='/home/root/.config/remarkable/xochitl.conf'
	usb0iprange='10.11.99.1/32'
}

run() {
	run_vars
	echo -e "Setting WebInterfaceEnabled=true in ${user_conf}"
	sed -i 's/WebInterfaceEnabled=false/WebInterfaceEnabled=true/g' "$user_conf"
	echo -e "${GREEN}Set WebInterfaceEnabled=true in ${user_conf}${NC}"

	echo "Adding ${usb0iprange} ip address to usb0"
	ip addr change $usb0iprange dev usb0
	echo -e "${GREEN}Added ${usb0iprange} ip address to usb0${NC}"
}

get_version() {
	conf_file='/usr/share/remarkable/update.conf'
	if ! [ -f $conf_file ]; then
		echo "Error: Can't find ${conf_file}"
		exit 1
	fi
	xo_version=$(grep 'REMARKABLE_RELEASE_VERSION' $conf_file | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
	IFS=. read -r versA versB _ _ <<<"$xo_version"

	if [ "$versA" -eq 2 ] && [ "$versB" -ge 15 ] || [ "$versA" -ge 3 ]; then
		is_hack_version=true
	else
		is_hack_version=false
	fi
}

help_vars() {
	get_version
	xo='xochitl'
	xo_file="/usr/bin/${xo}"
	share_rel='share/webinterface-onboot'
	storage_rel="${share_rel}/xochitl_backups"
	storage_dir="/home/root/.local/${storage_rel}"
	bak_xo="${storage_dir}/${xo}-${xo_version}-bak"
	tmp_xo="${storage_dir}/.${xo}.tmp"
}

status() {
	run_vars
	help_vars

	echo -e "${CYAN}[${NC}XOCHITL WEB INTERFACE${CYAN}]"
	if netstat -tuln | grep -qE "10.11.99.1:80.*LISTEN"; then
		echo -e "${GREEN}Running${NC}"
	else
		echo -e "${RED}Not running${NC}"
	fi

	if ip a | grep -qE "10.11.99.1/[32|29]"; then
		echo -e "${GREEN}usb0 network interface has 10.11.99.1 ip address${NC}"
	else
		echo -e "${YELLOW}usb0 network interface does not have 10.11.99.1 ip address${NC}"
	fi

	if [ "$(cat /sys/class/net/usb0/operstate)" == "up" ]; then
		echo -e "${PURPLE}usb0 cable ${YELLOW}connected${NC}"
	else
		echo -e "${PURPLE}usb0 cable ${YELLOW}not ${PURPLE}connected${NC}"
	fi

	# # ------------------------ SERVICE ------------------------
	# main_service='webinterface-onboot.service'
	# echo ''
	# echo -e "${CYAN}[${NC}SERVICE${CYAN}]"
	# echo -e "${PURPLE}webinterface-onboot:${NC}"
	# if systemctl --quiet is-enabled "$main_service" 2>/dev/null; then
	# 	echo -n " - enabled"
	# else
	# 	echo -n " - disabled"
	# fi
	# if ! systemctl --quiet is-failed "$main_service" 2>/dev/null; then
	# 	echo ", no errors"
	# else
	# 	echo ", error when running"
	# fi
	# # ------------------------ SERVICE ------------------------

	if [ "$is_hack_version" = false ]; then
		exit
	fi

	echo ''
	echo -e "${CYAN}[${NC}HACK${CYAN}]"
	if hack_applied "$xo_file"; then
		echo -e "${GREEN}Currently applied${NC}"
	else
		echo -e "${RED}Not currently applied${NC}"
		echo " - Run 'webinterface-onboot apply' for correct function"
	fi

	echo ''
	echo -e "${CYAN}[${NC}BACKUPS${CYAN}]"
	backup_found=false

	opt_baks="/opt/${storage_rel}"
	if [ -d "$opt_baks" ]; then
		bak_files=$(find "$opt_baks" -name '*-bak*')
		if [ -n "$bak_files" ]; then
			backup_found=true
			echo -e "${PURPLE}${opt_baks}${NC}"
			bak_files_xargs=$(echo "$bak_files" | xargs)
			IFS=' ' read -r -a arrayaa <<<"$bak_files_xargs"
			for element in "${arrayaa[@]}"; do
				IFS='/' read -r -a arrayab <<<"$element"
				echo " - ${arrayab[-1]}"
			done
		fi
	fi

	local_baks="/home/root/.local/${storage_rel}"
	if [ -d "$local_baks" ]; then
		bak_files=$(find "$local_baks" -name '*-bak*')
		if [ -n "$bak_files" ]; then
			backup_found=true
			echo -e "${PURPLE}${local_baks}${NC}"
			bak_files_xargs=$(echo "$bak_files" | xargs)
			IFS=' ' read -r -a arrayab <<<"$bak_files_xargs"
			for element in "${arrayab[@]}"; do
				IFS='/' read -r -a arraybb <<<"$element"
				echo " - ${arraybb[-1]}"
			done
		fi
	fi

	if [ "$backup_found" = false ]; then
		echo -e "${RED}No backups found in:${NC}"
		echo -e "${opt_baks}"
		echo -e "${local_baks}"
	fi
}

hack_applied() {
	if strings "$1" | grep usb | xargs | grep -q 'usbF usb0'; then
		return 0
	else
		return 1
	fi
}

hack_possible() {
	if strings "$1" | grep usb | xargs | grep -q 'usb0 usb1'; then
		return 0
	else
		return 1
	fi
}

rm_temp() {
	echo "Removing ${tmp_xo}"
	[[ -f "$tmp_xo" ]] && rm $tmp_xo
}

apply_hack() {
	echo "webinterface-onboot hack for xochitl versions >= v2.15"
	echo ""
	help_vars
	if [ "$is_hack_version" = true ]; then
		echo "Compatible xochitl version: v${xo_version}"
	else
		echo "Incompatible xochitl version: v${xo_version}"
		exit 1
	fi
	echo "Applying the hack will:"
	echo " - Store a backup of '${xo_file}' at '${bak_xo}'."
	echo ""

	if hack_applied $xo_file; then
		echo "Hack already applied successfully"
		exit 0
	fi

	if hack_possible $xo_file; then
		echo "Hack can be applied"
	else
		echo "Error: Hack can't be applied, something is misconfigured"
		exit 1
	fi

	if [ "$no_prompt" = false ]; then
		read -r -p "Would you like to continue? [y/N] " response
		case "$response" in
		[yY][eE][sS] | [yY])
			echo "Applying webinterface-onboot hack"
			echo ""
			;;
		*)
			echo "Cancel webinterface-onboot hack"
			exit 0
			;;
		esac
	fi

	mkdir -p $storage_dir

	if cp "$xo_file" "$bak_xo"; then
		echo "Created ${bak_xo} file"
	else
		echo "Error: Create ${bak_xo} file"
		[[ -f "$bak_xo" ]] && rm "$bak_xo"
		exit 1
	fi

	if cp "$xo_file" "$tmp_xo"; then
		echo "Created ${tmp_xo} file"
	else
		echo "Error: Create ${tmp_xo} file"
		rm_temp
		exit 1
	fi

	# The entire hack. In the binary, change strings:
	#   'usb0' -> 'usbF'
	#   'usb1' -> 'usb0'
	if sed -i 's/usb0/usbF/g' "$tmp_xo" &&
		sed -i 's/usb1/usb0/g' "$tmp_xo"; then
		echo "Binary strings substituted"
	else
		echo "Error: Binary strings not substituted"
		rm_temp
		exit 1
	fi

	if hack_applied "$tmp_xo"; then
		echo "Temp hack application success"
	else
		echo "Error: Temp hack application failed"
		rm_temp
		exit 1
	fi

	if mv "$tmp_xo" "$xo_file"; then
		rm_temp
		echo ""
		echo "Success: webinterface-onboot hack applied"
		exit 0
	else
		echo "Error: mv ${tmp_xo} -> ${xo_file}"
		rm_temp

		if cp "$bak_xo" "$xo_file"; then
			echo "Recovery Success: ${xo_file} restored from ${bak_xo}"
		else
			echo "Recovery Error: cp ${bak_xo} -> ${xo_file}"
			exit 1
		fi
	fi
}

revert_hack() {
	echo "Revert webinterface-onboot hack"
	echo ""
	help_vars
	if [ "$is_hack_version" = true ]; then
		echo "Compatible xochitl version: v${xo_version}"
	else
		echo "Incompatible xochitl version: v${xo_version}"
		exit 1
	fi
	echo -e "This can be done if the backup file generated via the hack is found, "
	echo "or by applying the hack in reverse order."
	echo ""

	if hack_possible "$xo_file"; then
		echo "Initial hack has not been applied to this file, nothing to revert"
		exit 0
	fi
	if [ -f "$bak_xo" ] && [ "$no_prompt" = false ]; then
		echo "Backup file found: ${bak_xo}"
		read -r -p "Would you like to revert from backup file? [y/N] " response
		case "$response" in
		[yY][eE][sS] | [yY])
			echo "Reverting from backup file"
			if revert_from_backup; then
				exit 0
			fi
			;;
		*)
			echo "Cancel revert from backup file"
			;;
		esac
	else
		echo "Can't find backup file ${bak_xo}"
		echo "Backup files can be at ${STORAGE_HOME} or ${STORAGE_OPT}"
	fi

	if [ "$no_prompt" = false ]; then
		read -r -p "Would you like to revert by reversing hack? [y/N] " response
		case "$response" in
		[yY][eE][sS] | [yY])
			true
			;;
		*)
			echo "Cancel revert from reverse hack"
			exit 0
			;;
		esac
	fi
	hack_backwards
}

revert_from_backup() {
	echo ""
	if cp "$bak_xo" "$xo_file"; then
		echo "Success: Revert from backup file"
		return 0
	else
		echo "Error: Revert from backup file"
		return 1
	fi
}

hack_backwards() {
	echo ""
	if ! hack_applied "$xo_file"; then
		echo "File can not be reverted"
		exit 1
	else
		echo "File can be reverted"
	fi

	mkdir -p "$storage_dir"

	BAK_APPLIED="${bak_xo}-hack-applied"
	if cp "$xo_file" "$BAK_APPLIED"; then
		echo "Created ${BAK_APPLIED} file"
	else
		echo "Error: Create ${BAK_APPLIED} files"
		[[ -f $BAK_APPLIED ]] && rm "$BAK_APPLIED"
		exit 1
	fi

	if cp "$xo_file" "$tmp_xo"; then
		echo "Created ${tmp_xo} files"
	else
		echo "Error: Create ${tmp_xo} files"
		rm_temp
		exit 1
	fi

	if sed -i 's/usb0/usb1/g' "$tmp_xo" &&
		sed -i 's/usbF/usb0/g' "$tmp_xo"; then
		echo "Binary strings substituted"
	else
		echo "Error: Binary strings not substituted"
		rm_temp
		exit 1
	fi

	if hack_possible "$tmp_xo"; then
		echo "Temp hack reversion success"
	else
		echo "Error: Temp hack reversion failed"
		rm_temp
		exit 1
	fi

	if mv "$tmp_xo" "$xo_file"; then
		rm_temp
		echo ""
		echo "Success: webinterface-onboot hack reverted"
		exit 0
	else
		echo "Error: mv ${tmp_xo} -> ${xo_file}"
		rm_temp

		if cp "$BAK_APPLIED" "$xo_file"; then
			echo "Recovery Success: ${xo_file} restored from ${BAK_APPLIED}"
		else
			echo "Recovery Error: cp ${BAK_APPLIED} -> ${xo_file}"
			exit 1
		fi
	fi
}

RED='\033[0;31m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

main "$@"
