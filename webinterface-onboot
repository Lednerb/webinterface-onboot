#!/usr/bin/env bash

main() {
	case "$@" in
	"--run")
		run
		;;
	"--apply-hack")
		apply_hack
		;;
	"--revert-hack")
		revert_hack
		;;
	'-h' | '--help' | '')
		cli_info
		;;
	*)
		echo 'input not recognized'
		usage
		;;
	esac
}

cli_info() {
	echo 'webinterface-onboot'
	echo ''
	echo 'This simple program will convince the ReMarkable Tablet to start'
	echo 'the web interface after booting without the usb cord being plugged in.'
	echo 'It can then be reached internally at 10.11.99.1:80 without the usb cord.'
	echo ''
	echo 'ENABLE/USE:'
	echo '  systemctl enable --now webinterface-onboot'
	echo 'DISABLE:'
	echo '  systemctl disable --now webinterface-onboot'
	usage
}

usage() {
	echo ''
	echo 'USAGE:'
	echo '  webinterface-onboot [OPTIONS]'
	echo ''
	echo 'OPTIONS:'
	echo '  -h, --help        Show help'
	echo '  --apply-hack      Apply webinterface-onboot hack for versions >= 2.15'
	echo '  --revert-hack     Revert webinterface-onboot hack'
}

run() {
	sed -i 's/WebInterfaceEnabled=false/WebInterfaceEnabled=true/g' /etc/remarkable.conf

	USB0IP='10.11.99.1'
	IPRANGE="${USB0IP}/32"
	while true; do
		ip addr add $IPRANGE dev usb0 2>/dev/null
		sleep 5
	done
}

hack_vars() {
	CONF='/usr/share/remarkable/update.conf'
	if ! [ -f $CONF ]; then
		echo "Error: can't find ${CONF}"
		exit
	fi
	VERSION=$(grep 'REMARKABLE_RELEASE_VERSION' $CONF | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
	IFS=. read -r versA versB _ _ <<<"$VERSION"
	if ((versA > 2)); then
		echo "Compatable version v${VERSION}"
	elif ((versA == 2)) && ((versB >= 15)); then
		echo "Compatable version v${VERSION}"
	else
		echo "Incompatable version v${VERSION}, hack only needed for >= v2.15"
		exit
	fi
	XO='xochitl'
	XO_FILE="/usr/bin/${XO}"
	if ! [ -f $CONF ]; then
		echo "Error: can't find ${CONF}"
		exit
	fi
	STORAGE_REL='share/webinterface-onboot'
	STORAGE_OPT="/opt/${STORAGE_REL}"
	STORAGE_HOME="/home/root/.local/${STORAGE_REL}"
	if [ -d '/opt' ] && mount | grep -q '/dev/mmcblk1p7 on /opt'; then
		STORAGE_DIR=$STORAGE_OPT
	else
		STORAGE_DIR=$STORAGE_HOME
	fi
	BAK_XO="${STORAGE_DIR}/${XO}-${VERSION}-bak"
	TMP_XO="${STORAGE_DIR}/.${XO}.tmp"
}

rm_temp() {
	echo "Removing ${TMP_XO}"
	[[ -f "$TMP_XO" ]] && rm $TMP_XO
}

hack_applied() {
	# shellcheck disable=SC2046
	return $(strings "$1" | grep usb | xargs | grep -q 'usbF usb0')
}

hack_possible() {
	# shellcheck disable=SC2046
	return $(strings "$1" | grep usb | xargs | grep -q 'usb0 usb1')
}

apply_hack() {
	echo "webinterface-onboot hack for xochitl versions >= 2.15"
	echo ""

	hack_vars

	echo "This will store a backup of '${XO_FILE}' at '${BAK_XO}'."
	printf "This will force the web-interface to use the usb0 interface even if "
	echo "the usb1 interface is the one connected to your device."
	echo ""

	if hack_applied $XO_FILE; then
		echo "Hack already applied successfully"
		exit
	fi

	if hack_possible $XO_FILE; then
		echo "Hack can be applied"
	else
		echo "Error: hack can't be applied, something is misconfigured"
		exit
	fi

	read -r -p "Would you like to apply hack? [y/N] " response
	case "$response" in
	[yY][eE][sS] | [yY])
		echo "Applying webinterface-onboot hack"
		echo ""
		;;
	*)
		echo "Cancel webinterface-onboot hack"
		exit
		;;
	esac

	mkdir -p $STORAGE_DIR

	if cp "$XO_FILE" "$BAK_XO"; then
		echo "Created ${BAK_XO} file"
	else
		echo "Error: create ${BAK_XO} file"
		[[ -f "$BAK_XO" ]] && rm "$BAK_XO"
		exit
	fi

	if cp "$XO_FILE" "$TMP_XO"; then
		echo "Created ${TMP_XO} file"
	else
		echo "Error: create ${TMP_XO} file"
		rm_temp
		exit
	fi

	# The entire hack
	# In the binary, change strings:
	#   'usb0' -> 'usbF'
	#   'usb1' -> 'usb0'
	if sed -i 's/usb0/usbF/g' "$TMP_XO" &&
		sed -i 's/usb1/usb0/g' "$TMP_XO"; then
		echo "Binary strings substituted"
	else
		echo "Error: strings not substituted"
		rm_temp
		exit
	fi

	if hack_applied "$TMP_XO"; then
		echo "temp hack application success"
	else
		echo "Error: temp hack application failed"
		rm_temp
		exit
	fi

	if mv "$TMP_XO" "$XO_FILE"; then
		rm_temp
		echo ""
		echo "Success: webinterface-onboot hack applied"
		exit
	else
		echo "Error: mv ${TMP_XO} -> ${XO_FILE}"
		rm_temp

		if cp "$BAK_XO" "$XO_FILE"; then
			echo "Recovery Success: ${XO_FILE} restored from ${BAK_XO}"
		else
			echo "Recovery Error: cp ${BAK_XO} -> ${XO_FILE}"
		fi
	fi
}

revert_hack() {
	echo "Revert webinterface-onboot hack"
	echo ""
	hack_vars
	printf "This can be done if the backup file generated via the hack is found, "
	echo "or by applying the hack in reverse order."
	echo ""

	if hack_possible "$XO_FILE"; then
		echo "Initital hack has not been applied to this file, nothing to revert"
		exit
	fi

	if [ -f "$BAK_XO" ]; then
		echo "Backup file found: ${BAK_XO}"
		read -r -p "Would you like to revert from backup file? [y/N] " response
		case "$response" in
		[yY][eE][sS] | [yY])
			echo "Reverting from backup file"
			revert_from_backup
			exit
			;;
		*)
			echo "Cancel revert from backup file"
			;;
		esac
	else
		echo "Can't find backup file ${BAK_XO}"
		echo "Backup files can be at ${STORAGE_HOME} or ${STORAGE_OPT}"
	fi

	read -r -p "Would you like to revert by reversing hack? [y/N] " response
	case "$response" in
	[yY][eE][sS] | [yY])
		hack_backwards
		;;
	*)
		echo "Cancel revert from reverse hack"
		;;
	esac
}

revert_from_backup() {
	echo ""
	if cp "$BAK_XO" "$XO_FILE"; then
		echo "Success: revert from backup file"
		return 0
	else
		echo "Error: revert from backup file"
		return 1
	fi
}

hack_backwards() {
	echo ""
	if ! hack_applied "$XO_FILE"; then
		echo "File can not be reverted"
		exit
	else
		echo "File can be reverted"
	fi

	mkdir -p "$STORAGE_DIR"

	BAK_APPLIED="${BAK_XO}-hack-applied"
	if cp "$XO_FILE" "$BAK_APPLIED"; then
		echo "Created ${BAK_APPLIED} file"
	else
		echo "Error: create ${BAK_APPLIED} files"
		[[ -f $BAK_APPLIED ]] && rm "$BAK_APPLIED"
		exit
	fi

	if cp "$XO_FILE" "$TMP_XO"; then
		echo "Created ${TMP_XO} files"
	else
		echo "Error: create ${TMP_XO} files"
		rm_temp
		exit
	fi

	if sed -i 's/usb0/usb1/g' "$TMP_XO" &&
		sed -i 's/usbF/usb0/g' "$TMP_XO"; then
		echo "Binary strings substituted"
	else
		echo "Error: binary strings not substituted"
		rm_temp
		exit
	fi

	if hack_possible "$TMP_XO"; then
		echo "temp hack reversion success"
	else
		echo "Error: temp hack reversion failed"
		rm_temp
		exit
	fi

	if mv "$TMP_XO" "$XO_FILE"; then
		rm_temp
		echo ""
		echo "Success: webinterface-onboot hack reverted"
		exit
	else
		echo "Error: mv ${TMP_XO} -> ${XO_FILE}"
		rm_temp

		if cp "$BAK_APPLIED" "$XO_FILE"; then
			echo "Recovery Success: ${XO_FILE} restored from ${BAK_APPLIED}"
		else
			echo "Recovery Error: cp ${BAK_APPLIED} -> ${XO_FILE}"
		fi
	fi
}

main "$@"
